version: 1.0

description: Create External Project Workflow


input:
  - project_name
  - project_description
  - network_name
  - network_description
  - subnet_name
  - subnet_description
  - router_name
  - router_description
  - ip_number
  - admin_user_list
  - stfc_user_list

vars:
  - stdout: null
  - stderr: null

  - security_info: <% list(
      dict("direction"=>"ingress", "ether_type"=>"IPv4", "protocol"=>"icmp", "remote_ip_prefix"=>"0.0.0.0/0", "dst_port"=>null),
      dict("direction"=>"ingress", "ether_type"=>"IPv4", "protocol"=>"tcp", "remote_ip_prefix"=>"0.0.0.0/0", "dst_port"=>"22:22"),
      dict("direction"=>"egress", "ether_type"=>"IPv4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.0.0/16", "dst_port"=>"53:53"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.0.0/16", "dst_port"=>"53:53"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.101/32", "dst_port"=>"80:80"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.163/32", "dst_port"=>"80:80"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.13/32", "dst_port"=>"80:80"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.13/32", "dst_port"=>"80:80"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.223.126/32", "dst_port"=>"80:9999"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.101/32", "dst_port"=>"80:80"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.186.163/32", "dst_port"=>"80:80"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.180.101/32", "dst_port"=>"443:443"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.223.126/32", "dst_port"=>"9999:9999"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"udp", "remote_ip_prefix"=>"130.246.0.0/16", "dst_port"=>"53:53"),
      dict("direction"=>"ingress", "ether_type"=> "IPV4", "protocol"=>"udp", "remote_ip_prefix"=>"130.246.0.0/16", "dst_port"=>"53:53"),
      dict("direction"=>"egress", "ether_type"=> "IPV4", "protocol"=>"tcp", "remote_ip_prefix"=>"130.246.176.0/22", "dst_port"=>"443:443")
      ) %>

  - security_egress_ip_info: <% list( "8.0.0.0/7", "192.170.0.0/15", "172.64.0.0/10", "192.160.0.0/13", "192.169.0.0/16", "192.176.0.0/12", "192.128.0.0/11", "173.0.0.0/8", "172.0.0.0/12", "130.248.0.0/12", "193.0.0.0/8", "130.247.0.0/16", "32.0.0.0/3", "131.0.0.0/8", "196.0.0.0/6", "176.0.0.0/4", "128.0.0.0/7", "174.0.0.0/7", "144.0.0.0/4", "172.128.0.0/9", "192.172.0.0/14", "192.192.0.0/10", "208.0.0.0/4",  "194.0.0.0/7", "168.0.0.0/6", "132.0.0.0/6", "192.0.0.0/9", "160.0.0.0/5", "172.32.0.0/11", "12.0.0.0/6", "16.0.0.0/4", "130.128.0.0/10", "130.224.0.0/12", "130.0.0.0/9", "64.0.0.0/2", "130.244.0.0/15", "200.0.0.0/5", "130.240.0.0/14", "11.0.0.0/8", "130.192.0.0/11", "136.0.0.0/5", "0.0.0.0/5") %>

output:
  - stdout: <% ctx().stdout %>
  - stderr: <% ctx().stderr %>

tasks:
  create_external_project:
    action: stackstorm_openstack.project.create
      name=<% ctx().project_name %>
      description=<% ctx().project_description %>
    next:
      - when: <% succeeded() %>
        do:
          - create_security_group_default
          - create_network
          - set_default_quota
          - create_admin_roles
          - create_stfc_roles
      - when: <% failed() %>
        publish: stderr="Failed creating project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_network:
    action: stackstorm_openstack.network.create
      name=<% ctx().network_name %>
      description=<% ctx().network_description %>
      project=<% ctx().project_name %>
      is_port_security_enabled=True
      provider_network_type="vxlan"
      is_router_external=False
    next:
      - when: <% succeeded() %>
        do:
          - create_rbac_policy
          - floating_ip_create
          - create_subnet
      - when: <% failed() %>
        publish: stderr="Failed creating network <% ctx().network_name %>, Error <% result() %>"
        do: fail

  create_rbac_policy:
    action: stackstorm_openstack.network.rbac.create
      object_type="network"
      action="access_as_shared"
      rbac_object=<% ctx().network_name %>
      target_project=<% ctx().project_name %>
    next:
      - when: <% failed() %>
        publish: stderr="Failed creating RBAC rules for Project <% ctx().project_name %> On Network <% ctx().network_name %>, Error <% result() %>"
        do: fail

  create_subnet:
    action: stackstorm_openstack.subnet.create
      name=<% ctx().subnet_name %>
      description=<% ctx().subnet_description %>
      network=<% ctx().network_name %>
      is_dhcp_enabled=True
    next:
      - when: <% succeeded() %>
        do: create_router
      - when: <% failed() %>
        publish: stderr="Failed creating subnet <% result() %>"
        do: fail

  create_router:
    action: stackstorm_openstack.router.create
      name=<% ctx().router_name %>
      description=<% ctx().router_description %>
      project=<% ctx().project_name %>
      is_distributed=False
      external_gateway="External"
    next:
      - when: <% succeeded() %>
        do: router_add_subnet
      - when: <% failed() %>
        publish: stderr="Failed creating router <% ctx().router_name %>, Error <% result() %>"
        do: fail

  router_add_subnet:
    action: stackstorm_openstack.router.add.interface router=<% ctx().router_name %> subnet=<% ctx().subnet_name %>
    next:
      - when: <% failed() %>
        publish: stderr="Failed adding subnet <% ctx().subnet_name %> to router <% ctx().router_name %>, Error <% result() %> "
        do: fail

  set_default_quota:
    action: stackstorm_openstack.quota.set project=<% ctx().project_name %> security_group_rules=200
    next:
      - when: <% succeeded() %>
        do:
          - create_security_group_rules
          - create_tcp_rules
          - create_udp_rules
      - when: <% failed() %>
        publish: stderr="Failed setting quota for project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_security_group_default:
    action: stackstorm_openstack.security.group.list project=<% ctx().project_name %>
    next:
      - when: <% failed() %>
        publish: stderr="Failed creating default network for Project <% ctx().project_name %>"
        do: fail

  create_security_group_rules:
    with: security_info in <% ctx(security_info) %>
    action: stackstorm_openstack.security.group.rule.create
      project=<% ctx().project_name %>
      security_group="default"
      direction=<% item(security_info).direction %>
      ether_type=<% item(security_info).ether_type %>
      protocol=<% item(security_info).protocol %>
      remote_ip_prefix=<% item(security_info).remote_ip_prefix %>
      dst_port=<% item(security_info).dst_port %>
    next:
      - when: <% failed() %>
        publish: stderr="Failed creating Security Group
          Rules for 'Default' for Project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_tcp_rules:
    with: <% ctx(security_egress_ip_info) %>
    action: stackstorm_openstack.security.group.rule.create
      project=<% ctx().project_name %>
      security_group="default"
      direction="egress"
      ether_type="IPV4"
      protocol="tcp"
      remote_ip_prefix=<% item() %>
      dst_port="1:65535"
    next:
      - when: <% failed() %>
        publish: stderr="Failed creating tcp egress security group Rules for 'Default' for Project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_udp_rules:
    with: <% ctx(security_egress_ip_info) %>
    action: stackstorm_openstack.security.group.rule.create
      project=<% ctx().project_name %>
      security_group="default"
      direction="egress"
      ether_type="IPV4"
      protocol="udp"
      remote_ip_prefix=<% item() %>
      dst_port="1:65535"
    next:
      - when: <% failed() %>
        publish: stderr="Failed creating udp egress security group Rules for 'Default' for Project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_admin_roles:
    with: <% ctx(admin_user_list) %>
    action: stackstorm_openstack.role.add
      project=<% ctx().project_name %>
      role="admin"
      user=<% item() %>
      user_domain="default"
    next:
      - when: <% failed() %>
        publish: stderr="Failed assigning admin roles for Project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  create_stfc_roles:
    with: <% ctx(stfc_user_list) %>
    action: stackstorm_openstack.role.add
      project=<% ctx().project_name %>
      role="user"
      user=<% item() %>
      user_domain="stfc"
    next:
      - when: <% failed() %>
        publish: stderr="Failed assigning user(stfc) roles for Project <% ctx().project_name %>, Error <% result() %>"
        do: fail

  floating_ip_create:
    action: stackstorm_openstack.floating.ip.create
      network="External"
      project=<% ctx().project_name %>
      number_to_create=<% ctx().ip_number %>
    next:
      - when: <% failed() %>
        publish: stderr="Failed assigning floating ips for project <% ctx().project_name %>, Error <% result() %>"
        do: fail
